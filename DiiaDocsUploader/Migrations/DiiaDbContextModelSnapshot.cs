// <auto-generated />
using System;
using DiiaDocsUploader.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DiiaDocsUploader.Migrations
{
    [DbContext(typeof(DiiaDbContext))]
    partial class DiiaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DiiaDocsUploader.Models.Entity.Branch", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CustomFullAddress")
                        .HasColumnType("text");

                    b.Property<string>("CustomFullName")
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("House")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("DiiaDocsUploader.Models.Entity.BranchDocumentType", b =>
                {
                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("BranchId")
                        .HasColumnType("text");

                    b.HasKey("DocumentTypeId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("BranchDocumentTypes");
                });

            modelBuilder.Entity("DiiaDocsUploader.Models.Entity.DocumentFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("DeepLinkId")
                        .HasColumnType("uuid");

                    b.Property<string>("DigitalSignaturePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocumentFilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DeepLinkId");

                    b.ToTable("DocumentFiles");
                });

            modelBuilder.Entity("DiiaDocsUploader.Models.Entity.DocumentMetadata", b =>
                {
                    b.Property<Guid>("DeepLinkId")
                        .HasColumnType("uuid");

                    b.Property<string>("MetadataFilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DeepLinkId");

                    b.ToTable("DocumentMetadatas");
                });

            modelBuilder.Entity("DiiaDocsUploader.Models.Entity.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("NameDiia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameUa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameDiia = "internal-passport",
                            NameUa = "Паспорт громадянина України у формі ID-картки"
                        },
                        new
                        {
                            Id = 2,
                            NameDiia = "foreign-passport",
                            NameUa = "Біометричний закордонний паспорт або закордонний паспорт"
                        },
                        new
                        {
                            Id = 3,
                            NameDiia = "taxpayer-card",
                            NameUa = "РНОКПП"
                        },
                        new
                        {
                            Id = 4,
                            NameDiia = "user-birth-record",
                            NameUa = "Свідоцтво про народження користувача"
                        },
                        new
                        {
                            Id = 5,
                            NameDiia = "birth-certificate",
                            NameUa = "Свідоцтво про народження дитини"
                        },
                        new
                        {
                            Id = 6,
                            NameDiia = "reference-internally-displaced-person",
                            NameUa = "Довідка внутрішньо переміщеної особи (ВПО)"
                        },
                        new
                        {
                            Id = 7,
                            NameDiia = "student-id-card",
                            NameUa = "Студентський квиток"
                        },
                        new
                        {
                            Id = 8,
                            NameDiia = "pension-card",
                            NameUa = "Пенсійне посвідчення"
                        },
                        new
                        {
                            Id = 9,
                            NameDiia = "name-change-act-record",
                            NameUa = "Відомості АЗ про зміну імені"
                        },
                        new
                        {
                            Id = 10,
                            NameDiia = "marriage-act-record",
                            NameUa = "Відомості АЗ про укладання шлюбу"
                        },
                        new
                        {
                            Id = 11,
                            NameDiia = "divorce-act-record",
                            NameUa = "Відомості АЗ про розірвання шлюбу"
                        },
                        new
                        {
                            Id = 12,
                            NameDiia = "veteran-certificate",
                            NameUa = "Посвідчення ветерана"
                        },
                        new
                        {
                            Id = 13,
                            NameDiia = "education-document",
                            NameUa = "Освітні документи"
                        },
                        new
                        {
                            Id = 14,
                            NameDiia = "residence-permit-permanent",
                            NameUa = "Е-посвідка на постійне проживання"
                        },
                        new
                        {
                            Id = 15,
                            NameDiia = "residence-permit-temporary",
                            NameUa = "Е-посвідка на тимчасове проживання"
                        });
                });

            modelBuilder.Entity("DiiaDocsUploader.Models.Entity.Offer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BranchId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("DiiaDocsUploader.Models.Entity.OfferDocumentType", b =>
                {
                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("OfferId")
                        .HasColumnType("text");

                    b.HasKey("DocumentTypeId", "OfferId");

                    b.HasIndex("OfferId");

                    b.ToTable("OfferDocumentTypes");
                });

            modelBuilder.Entity("DiiaDocsUploader.Models.Entity.BranchDocumentType", b =>
                {
                    b.HasOne("DiiaDocsUploader.Models.Entity.Branch", "Branch")
                        .WithMany("BranchDocumentTypes")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiiaDocsUploader.Models.Entity.DocumentType", "DocumentType")
                        .WithMany("BranchDocumentTypes")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("DiiaDocsUploader.Models.Entity.DocumentFile", b =>
                {
                    b.HasOne("DiiaDocsUploader.Models.Entity.DocumentMetadata", "DocumentMetadata")
                        .WithMany()
                        .HasForeignKey("DeepLinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentMetadata");
                });

            modelBuilder.Entity("DiiaDocsUploader.Models.Entity.Offer", b =>
                {
                    b.HasOne("DiiaDocsUploader.Models.Entity.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("DiiaDocsUploader.Models.Entity.OfferDocumentType", b =>
                {
                    b.HasOne("DiiaDocsUploader.Models.Entity.DocumentType", "DocumentType")
                        .WithMany("OfferDocumentTypes")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiiaDocsUploader.Models.Entity.Offer", "Offer")
                        .WithMany("OfferDocumentTypes")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("Offer");
                });

            modelBuilder.Entity("DiiaDocsUploader.Models.Entity.Branch", b =>
                {
                    b.Navigation("BranchDocumentTypes");
                });

            modelBuilder.Entity("DiiaDocsUploader.Models.Entity.DocumentType", b =>
                {
                    b.Navigation("BranchDocumentTypes");

                    b.Navigation("OfferDocumentTypes");
                });

            modelBuilder.Entity("DiiaDocsUploader.Models.Entity.Offer", b =>
                {
                    b.Navigation("OfferDocumentTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
